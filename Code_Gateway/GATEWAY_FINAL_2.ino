#include <HardwareSerial.h>
#include <TinyGPSPlus.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

// ƒê·ªãnh nghƒ©a c√°c h·∫±ng s·ªë cho ch√¢n ph·∫ßn c·ª©ng v√† m√†n h√¨nh OLED
#define BUTTON_PIN 34  // Ch√¢n GPIO34 d√πng cho n√∫t SOS
#define SCREEN_WIDTH 128  // Chi·ªÅu r·ªông m√†n h√¨nh OLED (pixel)
#define SCREEN_HEIGHT 32  // Chi·ªÅu cao m√†n h√¨nh OLED (pixel)
#define OLED_RESET -1  // Ch√¢n reset cho OLED (kh√¥ng s·ª≠ d·ª•ng)
#define SCREEN_ADDRESS 0x3C // ƒê·ªãa ch·ªâ I2C c·ªßa m√†n h√¨nh SSD1306

// ƒê·ªãnh nghƒ©a c√°c h·∫±ng s·ªë cho giao ti·∫øp v·ªõi module SIM
#define simSerial SIM  // B√≠ danh cho giao ti·∫øp serial v·ªõi SIM
#define MCU_SIM_BAUDRATE 9600  // T·ªëc ƒë·ªô baud cho module SIM
#define MCU_SIM_TX_PIN 5  // Ch√¢n TX cho module SIM
#define MCU_SIM_RX_PIN 4  // Ch√¢n RX cho module SIM
#define PHONE_NUMBER "+84392607120"  // S·ªë ƒëi·ªán tho·∫°i nh·∫≠n SMS

// ƒê·ªãnh nghƒ©a c√°c ch√¢n cho giao ti·∫øp v·ªõi module LoRa
#define RXD2 16  // Ch√¢n RX c·ªßa ESP32 n·ªëi v·ªõi TX c·ªßa LoRa
#define TXD2 17  // Ch√¢n TX c·ªßa ESP32 n·ªëi v·ªõi RX c·ªßa LoRa
#define M0 19  // Ch√¢n M0 c·ªßa LoRa ƒë·ªÉ c·∫•u h√¨nh ch·∫ø ƒë·ªô
#define M1 18  // Ch√¢n M1 c·ªßa LoRa ƒë·ªÉ c·∫•u h√¨nh ch·∫ø ƒë·ªô
#define BUZZER 25  // Ch√¢n ƒëi·ªÅu khi·ªÉn c√≤i b√°o SOS

// Kh·ªüi t·∫°o ƒë·ªëi t∆∞·ª£ng m√†n h√¨nh OLED
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

// Kh·ªüi t·∫°o ƒë·ªëi t∆∞·ª£ng serial cho LoRa v√† SIM
HardwareSerial LoRa(2);  // UART2 d√πng ƒë·ªÉ giao ti·∫øp v·ªõi LoRa
HardwareSerial SIM(1);   // UART1 d√πng ƒë·ªÉ giao ti·∫øp v·ªõi SIM

// C√°c bi·∫øn ƒë·ªÉ qu·∫£n l√Ω th·ªùi gian v√† tr·∫°ng th√°i SOS
signed long lastReceivedTime = -60000;  // Th·ªùi gian nh·∫≠n t√≠n hi·ªáu SOS cu·ªëi c√πng
const unsigned long sosTimeout = 60000; // Th·ªùi gian ch·ªù 60 gi√¢y ƒë·ªÉ tho√°t SOS
signed long lastSMSSentTime = -45000;  // Th·ªùi gian g·ª≠i SMS cu·ªëi c√πng
const unsigned long smsInterval = 45000; // Kho·∫£ng c√°ch 45 gi√¢y gi·ªØa c√°c SMS
bool sosActive = false;  // C·ªù theo d√µi tr·∫°ng th√°i SOS

// H√†m l·∫•y th·ªùi gian hi·ªán t·∫°i t·ª´ module SIM
String getSimTime() {
  while (simSerial.available()) simSerial.read(); // X√≥a b·ªô ƒë·ªám serial

  simSerial.println("AT+CCLK?");  // G·ª≠i l·ªánh AT ƒë·ªÉ l·∫•y th·ªùi gian
  unsigned long timeout = millis();
  String response = "";

  // Ch·ªù ph·∫£n h·ªìi trong 3 gi√¢y
  while (millis() - timeout < 3000) {
    while (simSerial.available()) {
      char c = simSerial.read();
      response += c;  // X√¢y d·ª±ng chu·ªói ph·∫£n h·ªìi
    }

    // Ki·ªÉm tra n·∫øu ph·∫£n h·ªìi ch·ª©a d·ªØ li·ªáu th·ªùi gian
    if (response.indexOf("+CCLK:") >= 0) {
      Serial.println("Ph·∫£n h·ªìi ƒë·∫ßy ƒë·ªß: " + response);
      int start = response.indexOf("\"") + 1;
      int end = response.lastIndexOf("\"");
      if (start > 0 && end > start) {
        String time = response.substring(start, end);  // Tr√≠ch xu·∫•t th·ªùi gian
        Serial.println("Th·ªùi gian tr√≠ch xu·∫•t: " + time);
        return time;
      }
    }
  }

  Serial.println("‚ö†Ô∏è Kh√¥ng l·∫•y ƒë∆∞·ª£c th·ªùi gian t·ª´ SIM");
  return "unknown";  // Tr·∫£ v·ªÅ gi√° tr·ªã m·∫∑c ƒë·ªãnh n·∫øu th·∫•t b·∫°i
}

// H√†m ch·ªù v√† ƒë·ªçc ph·∫£n h·ªìi t·ª´ module SIM
void sim_at_wait() {
  delay(100);  // ƒê·ª£i 100ms ƒë·ªÉ nh·∫≠n ph·∫£n h·ªìi
  while (simSerial.available()) {
    Serial.write(simSerial.read());  // In ph·∫£n h·ªìi ra Serial monitor
  }
}

// H√†m g·ª≠i l·ªánh AT t·ªõi module SIM
bool sim_at_cmd(String cmd) {
  simSerial.println(cmd);  // G·ª≠i l·ªánh AT
  sim_at_wait();  // Ch·ªù v√† ƒë·ªçc ph·∫£n h·ªìi
  return true;  // Lu√¥n tr·∫£ v·ªÅ true (kh√¥ng ki·ªÉm tra l·ªói)
}

// H√†m g·ª≠i m·ªôt k√Ω t·ª± t·ªõi module SIM
bool sim_at_send(char c) {
  simSerial.write(c);  // G·ª≠i k√Ω t·ª±
  return true;  // Lu√¥n tr·∫£ v·ªÅ true
}

// H√†m g·ª≠i tin nh·∫Øn SMS ch·ª©a th√¥ng ƒëi·ªáp SOS
void sent_sms(String sos) {
  sim_at_cmd("AT+CMGF=1");  // ƒê·∫∑t ch·∫ø ƒë·ªô SMS l√† vƒÉn b·∫£n
  String temp = "AT+CMGS=\"";
  temp += (String)PHONE_NUMBER;
  temp += "\"";  // ƒê·∫∑t s·ªë ƒëi·ªán tho·∫°i nh·∫≠n SMS
  sim_at_cmd(temp);  // G·ª≠i l·ªánh ƒë·ªÉ b·∫Øt ƒë·∫ßu SMS
  sim_at_cmd(sos);  // G·ª≠i n·ªôi dung tin nh·∫Øn SOS
  sim_at_send(0x1A);  // G·ª≠i k√Ω t·ª± k·∫øt th√∫c SMS (Ctrl+Z)
}

// H√†m g·ª≠i d·ªØ li·ªáu SOS l√™n Firebase qua HTTP POST
void sendToFirebase(String sosData) {
  String timestamp = getSimTime();  // L·∫•y th·ªùi gian t·ª´ SIM
  String firebaseHost = "https://e32-tracker-default-rtdb.firebaseio.com/sos.json";
  String jsonPayload = "{\"message\":\"" + sosData + "\",\"timestamp\":\"" + timestamp + "\"}";  // T·∫°o payload JSON

  sim_at_cmd("AT+HTTPTERM");  // K·∫øt th√∫c phi√™n HTTP tr∆∞·ªõc ƒë√≥
  delay(100);
  
  sim_at_cmd("AT+HTTPINIT");  // Kh·ªüi t·∫°o phi√™n HTTP
  delay(100);

  sim_at_cmd("AT+HTTPPARA=\"CID\",1");  // ƒê·∫∑t channel ID cho HTTP
  delay(100);

  sim_at_cmd("AT+HTTPPARA=\"URL\",\"" + firebaseHost + "\"");  // ƒê·∫∑t URL ƒë√≠ch
  delay(100);

  sim_at_cmd("AT+HTTPPARA=\"CONTENT\",\"application/json\"");  // ƒê·∫∑t lo·∫°i n·ªôi dung l√† JSON
  delay(100);

  simSerial.println("AT+HTTPDATA=" + String(jsonPayload.length()) + ",10000");  // Th√¥ng b√°o ƒë·ªô d√†i d·ªØ li·ªáu

  // Ch·ªù ph·∫£n h·ªìi "DATA" t·ª´ SIM tr∆∞·ªõc khi g·ª≠i d·ªØ li·ªáu
  unsigned long timeout = millis();
  while (!simSerial.find("DATA")) {
    if (millis() - timeout > 3000) {
      Serial.println("‚ùå Kh√¥ng nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi DATA");
      return;
    }
  }

  simSerial.print(jsonPayload);  // G·ª≠i n·ªôi dung JSON
  delay(1000);

  sim_at_cmd("AT+HTTPACTION=1");  // Th·ª±c hi·ªán l·ªánh POST
  delay(5000);  // ƒê·ª£i module g·ª≠i xong

  // ƒê·ªçc ph·∫£n h·ªìi t·ª´ server (+HTTPACTION:1,200,<datalen>)
  while (simSerial.available()) {
    String line = simSerial.readStringUntil('\n');
    if (line.indexOf("+HTTPACTION:") >= 0) {
      Serial.println("‚û°Ô∏è Ph·∫£n h·ªìi: " + line);
    }
  }

  sim_at_cmd("AT+HTTPREAD");  // ƒê·ªçc n·ªôi dung tr·∫£ v·ªÅ t·ª´ server
  delay(500);

  sim_at_cmd("AT+HTTPTERM");  // K·∫øt th√∫c phi√™n HTTP
}

// H√†m thi·∫øt l·∫≠p ban ƒë·∫ßu
void setup() {
  delay(20);  // ƒê·ª£i 20ms ƒë·ªÉ ·ªïn ƒë·ªãnh
  Serial.begin(115200);  // Kh·ªüi ƒë·ªông Serial ƒë·ªÉ debug
  pinMode(BUTTON_PIN, INPUT);  // C·∫•u h√¨nh ch√¢n n√∫t SOS l√† input
  LoRa.begin(9600, SERIAL_8N1, RXD2, TXD2);  // Kh·ªüi ƒë·ªông UART2 cho LoRa
  pinMode(M0, OUTPUT);  // C·∫•u h√¨nh ch√¢n M0 c·ªßa LoRa
  pinMode(M1, OUTPUT);  // C·∫•u h√¨nh ch√¢n M1 c·ªßa LoRa
  digitalWrite(M0, LOW);  // ƒê·∫∑t LoRa ·ªü ch·∫ø ƒë·ªô Normal
  digitalWrite(M1, LOW);
  pinMode(BUZZER, OUTPUT);  // C·∫•u h√¨nh ch√¢n c√≤i
  digitalWrite(BUZZER, LOW);  // T·∫Øt c√≤i ban ƒë·∫ßu
  Serial.println("üöÄ Module LoRa E32-433T20D ƒëang kh·ªüi ƒë·ªông...");
  delay(1000);

  // Kh·ªüi ƒë·ªông m√†n h√¨nh OLED
  if (!display.begin(SSD1306_SWITCHCAPVCC, SCREEN_ADDRESS)) {
    Serial.println(F("SSD1306 kh√¥ng t√¨m th·∫•y! Ki·ªÉm tra k·∫øt n·ªëi."));
  }
  display.clearDisplay();  // X√≥a m√†n h√¨nh
  display.setTextSize(1);  // ƒê·∫∑t k√≠ch th∆∞·ªõc ch·ªØ
  display.setTextColor(SSD1306_WHITE);  // ƒê·∫∑t m√†u ch·ªØ tr·∫Øng

  display.clearDisplay(); 
  display.setCursor(0, 0); 
  display.print("loanding...");  // Hi·ªÉn th·ªã th√¥ng b√°o kh·ªüi ƒë·ªông
  display.display(); 

  // Thi·∫øt l·∫≠p module SIM
  Serial.println("\n\n\n\n-----------------------\nSystem started!!!!");
  delay(8000);  // ƒê·ª£i 8 gi√¢y ƒë·ªÉ c·∫•p ngu·ªìn ·ªïn ƒë·ªãnh
  SIM.begin(MCU_SIM_BAUDRATE, SERIAL_8N1, MCU_SIM_RX_PIN, MCU_SIM_TX_PIN);  // Kh·ªüi ƒë·ªông UART1 cho SIM
  sim_at_cmd("AT");  // Ki·ªÉm tra l·ªánh AT
  sim_at_cmd("ATI");  // L·∫•y th√¥ng tin s·∫£n ph·∫©m
  sim_at_cmd("AT+CPIN?");  // Ki·ªÉm tra khe SIM
  sim_at_cmd("AT+CSQ");  // Ki·ªÉm tra ch·∫•t l∆∞·ª£ng t√≠n hi·ªáu
  sim_at_cmd("AT+CIMI");  // L·∫•y m√£ IMSI c·ªßa SIM

  display.clearDisplay();
  display.setCursor(0, 0);
  display.println("NO SIGNAL SOS");  // Hi·ªÉn th·ªã tr·∫°ng th√°i ban ƒë·∫ßu
  display.display();
}

// H√†m v√≤ng l·∫∑p ch√≠nh
void loop() {
  // Nh·∫≠n d·ªØ li·ªáu t·ª´ LoRa
  if (LoRa.available()) {
    String received = LoRa.readStringUntil('\n');  // ƒê·ªçc d·ªØ li·ªáu t·ªõi k√Ω t·ª± xu·ªëng d√≤ng
    received.trim();  // X√≥a kho·∫£ng tr·∫Øng

    if (received.startsWith("SOS")) {  // Ki·ªÉm tra t√≠n hi·ªáu SOS
      lastReceivedTime = millis();  // C·∫≠p nh·∫≠t th·ªùi gian nh·∫≠n SOS
      sosActive = true;  // ƒê·∫∑t tr·∫°ng th√°i SOS

      // N·∫øu ƒë·ªß 45 gi√¢y k·ªÉ t·ª´ SMS tr∆∞·ªõc
      if (millis() - lastSMSSentTime >= smsInterval) {
        display.clearDisplay();
        display.setCursor(0, 0);
        display.println("SIGNAL SOS!!!");  // Hi·ªÉn th·ªã th√¥ng b√°o SOS
        display.display();

        Serial.println(received);  // In d·ªØ li·ªáu nh·∫≠n ƒë∆∞·ª£c
        digitalWrite(BUZZER, HIGH);  // B·∫≠t c√≤i b√°o ƒë·ªông
        sent_sms(received);  // G·ª≠i SMS
        sendToFirebase(received);  // G·ª≠i d·ªØ li·ªáu l√™n Firebase
        lastSMSSentTime = millis();  // C·∫≠p nh·∫≠t th·ªùi gian g·ª≠i SMS
      }
    }
  }

  // N·∫øu v∆∞·ª£t qu√° th·ªùi gian ch·ªù v√† ƒëang ·ªü tr·∫°ng th√°i SOS
  if (millis() - lastReceivedTime > sosTimeout && sosActive) {
    digitalWrite(BUZZER, LOW);  // T·∫Øt c√≤i

    display.clearDisplay();
    display.setCursor(0, 0);
    display.println("NO SIGNAL SOS");  // Hi·ªÉn th·ªã tr·∫°ng th√°i kh√¥ng SOS
    display.display();

    sosActive = false;  // K·∫øt th√∫c tr·∫°ng th√°i SOS
  }

  delay(100);  // ƒê·ª£i 100ms tr∆∞·ªõc khi l·∫∑p l·∫°i
}
